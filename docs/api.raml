#%RAML 1.0
title: Challenge Tecnico API
description: Challenge para candidatos a Backend Developers - PatagonianTech
mediaType: application/json

/songs:
  description: Collection of available songs
  get:
    description: Get a list of songs based on artist name.
    queryParameters:
      artistName:
        description: "The name of the artist (case insensitive and doesn't need to match the whole name of the artist)"
        required: true
        minLength: 3
        type: string
        example: "Red Hot Chili"
      limit:
        description: "The number of song to return. Default: 20. Minimum: 1. Maximum: 50"
        required: false
        type: integer
        minimum: 1
        maximum: 50
        default: 20
        example: "limit=2"
      offset:
        description: "The base zero index of the first song to return. Default: 0 (i.e., the first album). Use with `limit` to get the next set of songs"
        required: false
        type: integer
        minimum: 0
        default: 0
        example: "offset=20"
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "songs": [
                  {
                    "songId": "2TpxZ7JUBn3udsd6aR7qg68",
                    "songTitle": "Californication"
                  },
                  {
                    "songId": "1TuxZ7JU323uw46aR7qd6V",
                    "songTitle": "Otherside"
                  }
                ],
                "limit": 2,
                "offset": 20,
                "total": 500,
                "next": "http://127.0.0.1/api/v1/songs?offset=22&limit=2&artistName=Red+Hot+Chili",
                "previous": "http://127.0.0.1/api/v1/songs?offset=18&limit=2&artistName=Red+Hot+Chili"
              }
      400:
          body:
            application/json:
              example: |
                {"statusCode": 400, "error": "Bad Request", "message": "Invalid request query input"}
  /populate:
    description: Populate songs with Spofify data
    get:
      description: Loads into a database all the songs from a list of Artist's IDs from Spotifyâ€™s public Web API.
      queryParameters:
        ids:
          description: "A comma-separated list of the Spotify Artist's IDs. Maximum: 20 IDs."
          required: true
          minLength: 22
          maxLength: 659
          type: string
          example: "53A0W3U0s8diEn9RhXQhVz,0oSGxfWSnnOXhD2fKuz2Gy"
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "artists": 2,
                  "albums": 649
                }
        400:
          body:
            application/json:
              example: |
                {"statusCode": 400, "error": "Bad Request", "message": "Invalid request query input"}
        500:
          body:
            application/json:
              example: |
                {"message": "Unexpected error while populate the song database"}
  /{songId}:
    description: Song entity
    get:
      description: Get the song with `songId = {songId}`
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "artists": [
                    {
                      "external_urls": {
                        "spotify": "https://open.spotify.com/artist/08td7MxkoHQkXnWAYD8d6Q"
                      },
                      "href": "https://api.spotify.com/v1/artists/08td7MxkoHQkXnWAYD8d6Q",
                      "id": "08td7MxkoHQkXnWAYD8d6Q",
                      "name": "Tania Bowra",
                      "type": "artist",
                      "uri": "spotify:artist:08td7MxkoHQkXnWAYD8d6Q"
                    }
                  ],
                  "disc_number": 1,
                  "duration_ms": 276773,
                  "explicit": false,
                  "external_urls": {
                    "spotify": "https://open.spotify.com/track/2TpxZ7JUBn3uw46aR7qd6V"
                  },
                  "href": "https://api.spotify.com/v1/tracks/2TpxZ7JUBn3uw46aR7qd6V",
                  "id": "2TpxZ7JUBn3uw46aR7qd6V",
                  "is_local": false,
                  "is_playable": true,
                  "name": "All I Want",
                  "preview_url": "https://p.scdn.co/mp3-preview/12b8cee72118f995f5494e1b34251e4ac997445e?cid=774b29d4f13844c495f206cafdad9c86",
                  "track_number": 1,
                  "type": "track",
                  "uri": "spotify:track:2TpxZ7JUBn3uw46aR7qd6V"
                }
        400:
          body:
            application/json:
              example: |
                {"statusCode": 400, "error": "Bad Request", "message": "Invalid request query input"}
        404:
          body:
            application/json:
              example: |
                {"message": "Song not found"}
